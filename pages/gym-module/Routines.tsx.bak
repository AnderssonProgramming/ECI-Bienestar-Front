import { useState, useEffect } from "react";
import dynamic from "next/dynamic";
import { Return } from "@/components/Return"
import { withRoleProtection } from "@/hoc/withRoleProtection";
import { 
    getCurrentRoutine, 
    getUserRoutines, 
    getRecommendedRoutines,
    Routine,
    RoutineDTO,
    RoutineExerciseDTO,
    createCustomRoutine,
    getAllExercises,
    BaseExercise
} from "@/api/gymServicesIndex";
import { getUserGoals } from "@/api/gym-module/goalService";
import { getAllStudents, Student } from "@/api/gym-module/userService";
import { getLatestPhysicalMeasurement } from "@/api/gym-module/physicalProgressService";
                                            </span>
                                        ))}lMeasurement } from "@/api/gym-module/physicalProgressService";
import Tabs from '@/components/gym-module/TabsProps';
import RoutineCarousel from "@/components/gym-module/RoutineCarousel";
import ExerciseCarousel from "@/components/gym-module/ExerciseCarousel";
import MuscleGroupSelector from "@/components/gym-module/MuscleGroupSelector";
import { AnimatePresence, motion } from "framer-motion";
import { PageTransitionWrapper } from "@/components/PageTransitionWrapper";
import toast from "react-hot-toast";
import { useRouter } from "next/router";
import StudentSelectionModal from "@/components/gym-module/StudentSelectionModal";
import { FilterBtn } from '@/components/gym-module/FilterBtn';
import UserIcon from '@/public/user-filter.svg';

// Dynamically import the 3D component to prevent SSR issues
const BodyCanvasInteractive = dynamic(
  () => import('@/components/gym-module/BodyCanvasInteractive'),
  { ssr: false } // Disable server-side rendering
);

// Mapping from zone ID to muscle group name
const zoneToMuscle: Record<number, string> = {
    1: 'pecho',
    2: 'espalda',
    3: 'bíceps',
    4: 'tríceps',
    5: 'hombros',
    6: 'abdomen',
    7: 'glúteos',
    8: 'cuádriceps',
    9: 'isquiotibiales',
    10: 'pantorrillas',
};

/**
 * Routines Component that renders the main content of the "Routines" page.
 * The view changes depending on the user's role (USER or TRAINER).
 */
const Routines = () => {
    const router = useRouter();
    const { studentId } = router.query;
    
    // User information
    const currentUserId = typeof window !== 'undefined' ? sessionStorage.getItem("id") : null;
    const [role, setRole] = useState<string | null>(null);
    
    // State for routines data
    const [currentRoutine, setCurrentRoutine] = useState<Routine | null>(null);
    const [routines, setRoutines] = useState<Routine[]>([]);
    const [recommendedRoutines, setRecommendedRoutines] = useState<Routine[]>([]);
    
    // State for filtered routines
    const [filteredRoutines, setFilteredRoutines] = useState<Routine[]>([]);
    const [filteredRecommended, setFilteredRecommended] = useState<Routine[]>([]);
    
    // UI state
    const [loading, setLoading] = useState<boolean>(true);
    const [activeTab, setActiveTab] = useState('rutina-actual');
    const [selectedMuscleGroup, setSelectedMuscleGroup] = useState<number | null>(null);
    
    // TRAINER specific states
    const [viewMode, setViewMode] = useState<'dashboard' | 'detail'>('detail');
    const [students, setStudents] = useState<Student[]>([]);
    const [selectedStudent, setSelectedStudent] = useState<Student | null>(null);
    const [showStudentSelector, setShowStudentSelector] = useState(false);
    const [searchTerm, setSearchTerm] = useState("");    const [filteredStudents, setFilteredStudents] = useState<Student[]>([]);
    
    // Exercise and routine creation states
    const [allExercises, setAllExercises] = useState<BaseExercise[]>([]);
    const [newRoutine, setNewRoutine] = useState<RoutineDTO>({
        name: '',
        description: '',
        difficulty: 'Beginner',
        goal: '',
        exercises: []
    });
    
    // Physical progress and goals for recommended routines
    const [userGoals, setUserGoals] = useState<string[]>([]);
    const [physicalMeasurement, setPhysicalMeasurement] = useState<Record<string, any> | null>(null);

    useEffect(() => {
        // Get user role from session storage
        const userRole = sessionStorage.getItem("role");
        setRole(userRole);
        
        // Determine view mode based on role and studentId
        if (userRole === "TRAINER" && !studentId) {
            setViewMode('dashboard');
            loadTrainerDashboard();
        } else {
            setViewMode('detail');
            const targetUserId = studentId ? studentId as string : currentUserId;
            if (targetUserId) {
                loadUserData(targetUserId);
            }
        }
    }, [currentUserId, studentId]);
    
    // Load trainer dashboard with student list
    const loadTrainerDashboard = async () => {
        try {
            setLoading(true);
            
            if (!currentUserId) {
                console.error("No se encontró ID del entrenador");
                return;
            }
            
            // Get students assigned to the trainer
            const trainerStudents = await getAllStudents();
            setStudents(trainerStudents);
            setFilteredStudents(trainerStudents);
            
            // Get available exercises for routine creation
            const exercisesData = await getAllExercises();
            setAllExercises(exercisesData);
            
        } catch (error) {
            console.error("Error al cargar dashboard del entrenador:", error);
        } finally {
            setLoading(false);
        }
    };
    
    // Load detailed data for a specific user
    const loadUserData = async (userId: string) => {
        try {
            setLoading(true);
            console.log(`Cargando datos para usuario ${userId}`);
            
            // If trainer viewing a student, get student details
            if (role === "TRAINER" && userId !== currentUserId) {
                const studentsList = await getAllStudents();
                const student = studentsList.find(s => s.id === userId);
                if (student) {
                    setSelectedStudent(student);
                }
                
                // Get all exercises for routine creation
                const exercisesData = await getAllExercises();
                setAllExercises(exercisesData);
            }
            
            // Fetch routines and other data in parallel
            try {
                // Fetch physical goals and measurements for recommendations
                const [goalsData, physicalData] = await Promise.all([
                    getUserGoals(userId),
                    getLatestPhysicalMeasurement(userId)
                ]);
                setUserGoals(goalsData);
                setPhysicalMeasurement(physicalData);
                
                // Fetch current routine, user routines, and recommended routines
                const [currentRoutineData, userRoutinesData, recommendedRoutinesData] = await Promise.all([
                    getCurrentRoutine(userId).catch(err => {
                        console.error('Error fetching current routine:', err);
                        return null;
                    }),
                    getUserRoutines(userId).catch(err => {
                        console.error('Error fetching user routines:', err);
                        toast.error("No se pudieron cargar tus rutinas");
                        return [];
                    }),
                    getRecommendedRoutines(userId).catch(err => {
                        console.error('Error fetching recommended routines:', err);
                        toast.error("No se pudieron cargar las rutinas recomendadas");
                        return [];
                    })
                ]);
                
                setCurrentRoutine(currentRoutineData);
                setRoutines(userRoutinesData);
                setFilteredRoutines(userRoutinesData);
                setRecommendedRoutines(recommendedRoutinesData);
                setFilteredRecommended(recommendedRoutinesData);
            } catch (error) {
                console.error('Error loading user data:', error);
            } finally {
                setLoading(false);
            }
        } catch (error) {
            console.error("Error al cargar datos del usuario:", error);
            setLoading(false);
        }
    };

    // Filter students based on search term    useEffect(() => {
        if (students.length > 0) {
            const searchTermLower = searchTerm.toLowerCase();
            const filtered = students.filter(student => 
                (student.name?.toLowerCase().includes(searchTermLower)) ||
                (student.institutionalId?.toLowerCase().includes(searchTermLower))
            );
            setFilteredStudents(filtered);
        }
    }, [searchTerm, students]);

    // Effect to filter routines based on selected muscle group
    useEffect(() => {
        if (selectedMuscleGroup !== null) {
            const muscleName = zoneToMuscle[selectedMuscleGroup].toLowerCase();
            
            // Filter routines based on their exercises' muscle groups
            setFilteredRoutines(
                routines.filter(routine => 
                    routine.exercises?.some(exercise => 
                        exercise.muscleGroup?.toLowerCase() === muscleName ||
                        exercise.muscleGroup?.toLowerCase()?.includes(muscleName)
                    ) || false
                )
            );
            
            // Similarly filter recommended routines
            setFilteredRecommended(
                recommendedRoutines.filter(routine => 
                    routine.exercises?.some(exercise => 
                        exercise.muscleGroup?.toLowerCase() === muscleName ||
                        exercise.muscleGroup?.toLowerCase()?.includes(muscleName)
                    ) || false
                )
            );
        } else {
            setFilteredRoutines(routines);
            setFilteredRecommended(recommendedRoutines);
        }    }, [selectedMuscleGroup, routines, recommendedRoutines]);
    
    // Handle student selection from modal
    const handleStudentSelect = (student: Student) => {
        setShowStudentSelector(false);
        router.push(`/gym-module/Routines?studentId=${student.id}`);
    };
    
    // Handle student card click in dashboard
    const handleStudentCardClick = (studentId: string) => {
        router.push(`/gym-module/Routines?studentId=${studentId}`);
    };
    
    // Handle routine creation for a student
    const handleCreateRoutine = async () => {
        if (!selectedStudent?.id) {
            toast.error("Por favor, seleccione un estudiante primero");
            return;
        }
        
        try {
            await createCustomRoutine(selectedStudent.id, newRoutine);
            toast.success("Rutina creada exitosamente");
            
            // Reload user data to show the new routine
            loadUserData(selectedStudent.id);
            
            // Reset form
            setNewRoutine({
                name: '',
                description: '',
                difficulty: 'Beginner',
                goal: '',
                exercises: []
            });
        } catch (error) {
            console.error("Error al crear rutina:", error);
            toast.error("Error al crear la rutina");
        }
    };
    
    // Add exercise to new routine
    const handleAddExercise = (exercise: BaseExercise) => {
        if (!exercise.id) {
            toast.error("No se puede agregar un ejercicio sin ID");
            return;
        }
        
        const newExercise: RoutineExerciseDTO = {
            baseExerciseId: exercise.id,
            sets: 3,
            repetitions: 12,
            restTime: 60,
            sequenceOrder: (newRoutine.exercises?.length ?? 0) + 1
        };
        
        setNewRoutine(prev => ({
            ...prev,
            exercises: [...(prev.exercises || []), newExercise]
        }));
    };
    
    // Remove exercise from new routine
    const handleRemoveExercise = (index: number) => {
        setNewRoutine(prev => ({
            ...prev,
            exercises: prev.exercises?.filter((_, i) => i !== index)
        }));
    };

    return (
        <PageTransitionWrapper>
            {loading ? (
                <div className="flex justify-center items-center h-64">
                    <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-purple-500"></div>
                </div>
            ) : viewMode === 'dashboard' ? (
                // TRAINER DASHBOARD VIEW
                <div className="flex flex-col gap-6">
                    <Return 
                        className="self-stretch flex-[0_0_auto] w-full"
                        text="Módulo de Gimnasio"
                        returnPoint="/gym-module"
                    />
                    
                    <div className="flex flex-col w-full">
                        <div className="flex flex-wrap justify-between items-center mb-6">
                            <h1 className="text-2xl font-bold text-gray-800">Gestión de Rutinas - Estudiantes</h1>
                            
                            <div className="flex items-center gap-4">
                                <FilterBtn
                                    icon={UserIcon}
                                    text="Buscar estudiante"
                                    type="search"
                                    action={(term: string) => setSearchTerm(term)}
                                />
                                
                                <button
                                    onClick={() => setShowStudentSelector(true)}
                                    className="flex items-center gap-2 bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700"
                                >
                                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                                        <path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path>
                                        <circle cx="9" cy="7" r="4"></circle>
                                        <path d="M23 21v-2a4 4 0 0 0-3-3.87"></path>
                                        <path d="M16 3.13a4 4 0 0 1 0 7.75"></path>
                                    </svg>
                                    Ver estudiante
                                </button>
                            </div>
                        </div>
                        
                        {filteredStudents.length === 0 ? (
                            <div className="bg-yellow-50 border border-yellow-200 text-yellow-700 p-4 rounded-md text-center">
                                No se encontraron estudiantes. {searchTerm && "Intenta con otra búsqueda."}
                            </div>
                        ) : (
                            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                                {filteredStudents.map((student) => (
                                    <div 
                                        key={student.id}
                                        className="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow cursor-pointer"
                                        onClick={() => handleStudentCardClick(student.id)}
                                    >
                                        <div className="p-6">
                                            <div className="flex justify-between items-start mb-4">
                                                <div>
                                                    <h3 className="text-lg font-semibold text-gray-800">{student.name}</h3>
                                                    <p className="text-gray-500">ID: {student.institutionalId}</p>
                                                </div>
                                            </div>
                                            
                                            <div className="mt-4 text-right">
                                                <span className="text-blue-600 text-sm">Gestionar rutinas →</span>
                                            </div>
                                        </div>
                                    </div>
                                ))}                    </div>
                        )}
                    </div>
                    
                    {showStudentSelector && (
                        <StudentSelectionModal
                            isOpen={showStudentSelector}
                            onSelectStudent={handleStudentSelect}
                            onClose={() => setShowStudentSelector(false)}
                        />
                    )}
                </div>
            ) : role === "TRAINER" && selectedStudent ? (
                // TRAINER VIEWING SPECIFIC STUDENT
                <div className="flex flex-col gap-6">
                    <Return 
                        className="self-stretch flex-[0_0_auto] w-full"
                        text="Volver al listado"
                        returnPoint="/gym-module/Routines"
                    />
                    
                    <div className="flex flex-col w-full">
                        <div className="flex flex-wrap justify-between items-center mb-6">
                            <h1 className="text-2xl font-bold text-gray-800">
                                Rutinas de {selectedStudent.name}
                            </h1>
                            
                            <button
                                onClick={() => router.push('/gym-module/Routines')}
                                className="text-blue-600 border border-blue-600 px-4 py-1.5 rounded-md hover:bg-blue-50"
                            >
                                Volver al dashboard
                            </button>
                        </div>
                        
                        {/* Crear nueva rutina form */}
                        <div className="bg-white p-6 rounded-lg shadow-md mb-8">
                            <h2 className="text-xl font-semibold mb-4">Crear nueva rutina</h2>
                            
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">Nombre de la rutina</label>
                                    <input
                                        type="text"
                                        value={newRoutine.name}
                                        onChange={(e) => setNewRoutine({...newRoutine, name: e.target.value})}
                                        className="w-full p-2 border border-gray-300 rounded-md"
                                        placeholder="Ej: Rutina de fuerza"
                                    />
                                </div>
                                
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">Objetivo</label>
                                    <input
                                        type="text"
                                        value={newRoutine.goal}
                                        onChange={(e) => setNewRoutine({...newRoutine, goal: e.target.value})}
                                        className="w-full p-2 border border-gray-300 rounded-md"
                                        placeholder="Ej: Ganar masa muscular"
                                    />
                                </div>
                                  <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1" id="difficulty-label">Dificultad</label>
                                    <select
                                        value={newRoutine.difficulty}
                                        onChange={(e) => setNewRoutine({...newRoutine, difficulty: e.target.value})}
                                        className="w-full p-2 border border-gray-300 rounded-md"
                                        aria-labelledby="difficulty-label"
                                    >
                                        <option value="Beginner">Principiante</option>
                                        <option value="Intermediate">Intermedio</option>
                                        <option value="Advanced">Avanzado</option>
                                    </select>
                                </div>
                                
                                <div className="md:col-span-2">
                                    <label className="block text-sm font-medium text-gray-700 mb-1">Descripción</label>
                                    <textarea
                                        value={newRoutine.description}
                                        onChange={(e) => setNewRoutine({...newRoutine, description: e.target.value})}
                                        className="w-full p-2 border border-gray-300 rounded-md"
                                        rows={3}
                                        placeholder="Descripción de la rutina..."
                                    ></textarea>
                                </div>
                            </div>
                            
                            <div className="border-t border-gray-200 pt-4 mt-4">
                                <h3 className="text-lg font-medium mb-2">Ejercicios</h3>
                                
                                {/* Listado de ejercicios disponibles */}
                                <div className="mb-4">
                                    <label className="block text-sm font-medium text-gray-700 mb-1">Agregar ejercicios</label>
                                    <div className="max-h-60 overflow-y-auto border border-gray-200 rounded-md p-2">
                                        {allExercises.map((exercise) => (
                                            <div key={exercise.id} className="flex justify-between items-center py-2 border-b border-gray-100">
                                                <div>
                                                    <p className="font-medium">{exercise.name}</p>
                                                    <p className="text-sm text-gray-500">{exercise.muscleGroup}</p>
                                                </div>
                                                <button
                                                    onClick={() => handleAddExercise(exercise)}
                                                    className="text-sm bg-blue-50 text-blue-600 px-3 py-1 rounded-md hover:bg-blue-100"
                                                >
                                                    Agregar
                                                </button>
                                            </div>
                                        ))}
                                    </div>
                                </div>
                                
                                {/* Ejercicios seleccionados */}
                                <div>
                                    <h4 className="text-md font-medium mb-2">Ejercicios seleccionados</h4>
                                    {newRoutine.exercises && newRoutine.exercises.length > 0 ? (
                                        <div className="border border-gray-200 rounded-md">
                                            {newRoutine.exercises.map((exercise, index) => {
                                                // Find the base exercise to get name and muscle group
                                                const baseExercise = allExercises.find(e => e.id === exercise.baseExerciseId);
                                                
                                                return (
                                                    <div key={`exercise-${baseExercise?.id ?? index}`} className="flex flex-wrap justify-between items-center p-3 border-b border-gray-100">
                                                        <div className="w-full md:w-auto mb-2 md:mb-0">                                                            <p className="font-medium">{baseExercise?.name ?? 'Ejercicio'}</p>
                                                            <p className="text-sm text-gray-500">{baseExercise?.muscleGroup ?? 'Grupo muscular'}</p>
                                                        </div>
                                                        
                                                        <div className="flex flex-wrap gap-2 items-center">                                                            <div>
                                                                <label className="block text-xs text-gray-500" id={`sets-label-${index}`}>Series</label>
                                                                <input
                                                                    type="number"
                                                                    value={exercise.sets}
                                                                    onChange={(e) => {
                                                                        const newExercises = [...newRoutine.exercises!];
                                                                        newExercises[index] = {
                                                                            ...newExercises[index],
                                                                            sets: parseInt(e.target.value)
                                                                        };
                                                                        setNewRoutine({...newRoutine, exercises: newExercises});
                                                                    }}
                                                                    className="w-16 p-1 border border-gray-300 rounded-md"
                                                                    min="1"
                                                                    aria-labelledby={`sets-label-${index}`}
                                                                    placeholder="Sets"
                                                                />
                                                            </div>
                                                            
                                                            <div>
                                                                <label className="block text-xs text-gray-500" id={`reps-label-${index}`}>Reps</label>
                                                                <input
                                                                    type="number"
                                                                    value={exercise.repetitions}
                                                                    onChange={(e) => {
                                                                        const newExercises = [...newRoutine.exercises!];
                                                                        newExercises[index] = {
                                                                            ...newExercises[index],
                                                                            repetitions: parseInt(e.target.value)
                                                                        };
                                                                        setNewRoutine({...newRoutine, exercises: newExercises});
                                                                    }}
                                                                    className="w-16 p-1 border border-gray-300 rounded-md"
                                                                    min="1"
                                                                    aria-labelledby={`reps-label-${index}`}
                                                                    placeholder="Reps"
                                                                />
                                                            </div>
                                                            
                                                            <div>
                                                                <label className="block text-xs text-gray-500" id={`rest-label-${index}`}>Descanso (s)</label>
                                                                <input
                                                                    type="number"
                                                                    value={exercise.restTime}
                                                                    onChange={(e) => {
                                                                        const newExercises = [...newRoutine.exercises!];
                                                                        newExercises[index] = {
                                                                            ...newExercises[index],
                                                                            restTime: parseInt(e.target.value)
                                                                        };
                                                                        setNewRoutine({...newRoutine, exercises: newExercises});
                                                                    }}
                                                                    className="w-16 p-1 border border-gray-300 rounded-md"
                                                                    min="0"
                                                                    aria-labelledby={`rest-label-${index}`}
                                                                    placeholder="Descanso"
                                                                />
                                                            </div>
                                                            
                                                            <button
                                                                onClick={() => handleRemoveExercise(index)}
                                                                className="text-sm bg-red-50 text-red-600 px-3 py-1 rounded-md hover:bg-red-100 ml-2"
                                                            >
                                                                Eliminar
                                                            </button>
                                                        </div>
                                                    </div>
                                                );
                                            })}
                                        </div>
                                    ) : (
                                        <p className="text-gray-500 text-center py-4 border border-gray-200 rounded-md">
                                            No hay ejercicios seleccionados
                                        </p>
                                    )}
                                </div>
                            </div>
                            
                            <div className="mt-6 text-right">
                                <button
                                    onClick={handleCreateRoutine}
                                    disabled={!newRoutine.name || !newRoutine.exercises || newRoutine.exercises.length === 0}
                                    className="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed"
                                >
                                    Crear Rutina
                                </button>
                            </div>
                        </div>
                        
                        {/* Rutinas actuales del estudiante */}
                        <div className="mb-8">
                            <h2 className="text-xl font-semibold mb-4">Rutinas Actuales</h2>
                            {routines.length > 0 ? (
                                <div className="mb-4">
                                    <RoutineCarousel routines={routines} />
                                </div>
                            ) : (
                                <p className="text-center py-4 bg-gray-50 rounded-md text-gray-500">
                                    No hay rutinas disponibles para este estudiante
                                </p>
                            )}
                        </div>
                        
                        {/* Rutinas recomendadas basadas en sus objetivos */}
                        <div>
                            <h2 className="text-xl font-semibold mb-4">Rutinas Recomendadas por Objetivos</h2>
                            <div className="mb-2">
                                <h3 className="text-md font-medium">Objetivos del estudiante:</h3>
                                <div className="flex flex-wrap gap-2 mt-1">
                                    {userGoals.length > 0 ? (
                                        userGoals.map((goal, index) => (
                                            <span key={index} className="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm">
                                                {goal}
                                            </span>
                                        ))
                                    ) : (
                                        <span className="text-gray-500">No se han definido objetivos</span>
                                    )}
                                </div>
                            </div>
                            
                            {recommendedRoutines.length > 0 ? (
                                <div className="mb-4">
                                    <RoutineCarousel routines={recommendedRoutines} />
                                </div>
                            ) : (
                                <p className="text-center py-4 bg-gray-50 rounded-md text-gray-500">
                                    No hay rutinas recomendadas disponibles para este estudiante
                                </p>
                            )}
                        </div>
                    </div>
                </div>
            ) : (
                // USER VIEW
                <div className="flex flex-col gap-6">
                    <Return 
                        className="self-stretch flex-[0_0_auto] w-full"
                        text="Rutinas"
                        returnPoint="/gym-module"
                    />
                    
                    <div className="flex flex-col md:flex-row gap-6">
                        <div className="w-full md:w-1/2 lg:w-5/12 flex flex-col items-center justify-center gap-5">
                            {/* Selector de anatomía - modelo 3D sin botones */}
                            <BodyCanvasInteractive
                                modelPath="/models/male/scene.gltf"
                            />
                            <div className="text-center text-sm text-gray-500">
                                Usa el selector de arriba para filtrar por grupo muscular
                            </div>
                        </div>

                        <div className="flex flex-col w-full">
                            {/* Selector de grupos musculares mejorado */}
                            <MuscleGroupSelector 
                                onSelect={setSelectedMuscleGroup}
                                selectedMuscleGroup={selectedMuscleGroup}
                                zoneMap={zoneToMuscle}
                            />
                            
                            {/* Pestañas */}
                            <div className="mb-6">
                                <Tabs
                                    tabs={[
                                    { id: 'rutina-actual', label: 'Rutina actual' },
                                    { id: 'todas-rutinas', label: 'Todas las rutinas' }
                                    ]}
                                    activeTab={activeTab}
                                    onTabChange={setActiveTab}
                                />
                            <AnimatePresence mode="wait">
                                {filteredRoutines.length > 0 ? (
                                    <>
                                        {activeTab === 'rutina-actual' && currentRoutine && (
                                            <motion.div
                                                key="rutina-actual"
                                                initial={{ opacity: 0, y: 20 }}
                                                animate={{ opacity: 1, y: 0 }}
                                                exit={{ opacity: 0, y: -20 }}
                                                transition={{ duration: 0.3 }}
                                                className="flex flex-col gap-4"
                                            >
                                                <h2 className="text-2xl font-bold">{currentRoutine.name}</h2>
                                                <p className="relative w-fit mt-[-1px] font-bold text-gray-700">{currentRoutine.description}</p>
                                                <ExerciseCarousel exercises={currentRoutine.exercises || []} />
                                            </motion.div>
                                        )}
                                        {activeTab === 'todas-rutinas' && (
                                            <motion.div
                                                key="todas-rutinas"
                                                initial={{ opacity: 0, y: 20 }}
                                                animate={{ opacity: 1, y: 0 }}
                                                exit={{ opacity: 0, y: -20 }}
                                                transition={{ duration: 0.3 }}
                                                className="flex flex-col gap-4"
                                            >
                                                <h2 className="text-2xl font-bold mb-4">Tus Rutinas</h2>
                                                <RoutineCarousel routines={filteredRoutines} />
                                            </motion.div>
                                        )}
                                    </>
                                ) : (
                                    <div className="col-span-full text-center py-6 text-gray-500">
                                        No hay rutinas disponibles para este grupo muscular
                                    </div>
                                )}
                            </AnimatePresence>

                            <h2 className="text-2xl font-bold mt-8 mb-4">Rutinas Recomendadas</h2>
                            {/* Mostrar los objetivos del usuario */}
                            {userGoals.length > 0 && (
                                <div className="mb-4 p-4 bg-blue-50 rounded-lg">
                                    <h3 className="font-semibold mb-2">Tus objetivos:</h3>
                                    <div className="flex flex-wrap gap-2">                                            {userGoals.map((goal, i) => (
                                            <span key={`goal-${i}-${goal}`} className="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm">
                                                {goal}
                                            </span>
                                        ))}
                                    </div>
                                </div>
                            )}
                            
                            <div>
                                {filteredRecommended.length > 0 ? (
                                    <RoutineCarousel routines={filteredRecommended} />
                                ) : (
                                    <div className="col-span-full text-center py-6 text-gray-500">
                                        No hay rutinas recomendadas para este grupo muscular
                                    </div>
                                )}
                            </div>
                            </div>
                        </div>
                    </div>
                </div>
            )}
              {/* Modal de selección de estudiante */}
            {showStudentSelector && (
                <StudentSelectionModal
                    isOpen={showStudentSelector}
                    onSelectStudent={handleStudentSelect}
                    onClose={() => setShowStudentSelector(false)}
                />
            )}
        </PageTransitionWrapper>
    );
}

export default withRoleProtection(["USER", "TRAINER"], "/gym-module")(Routines);